
During the interview, I mentioned that my recent work has leaned more towards backend development over the past 1.5 years.
How our Microservices architecture is divided

- Domains
- Sub domain -> subscription -> then divided based on integrations & domains
- Subscription platform is kind of orchestrator among payment, offers, orders, billing, discounts, finance, 
- Itâ€™s legacy enterprise and has oracle, sap apps, so we had to orchestrator between this applications. Subscription domain is where we are validating order, performing various translators
- 
What all microservices pattern we use
CQRS and event sourcing



https://loft.sh/features/self-service-kubernetes-namespaces
https://www.getambassador.io/docs/telepresence-oss
https://refactoring.guru/design-patterns/behavioral-patterns
https://www.thoughtworks.com/en-us/insights/blog/architecture/domain-driven-design-in-functional-programming


Chain of responsibility - spring request handlers, gateway where we transform, validate, translate . Also in telemeter event collector
Strategy - gateway, for various sources different transformations and translations are being performed
Observer - event based using RMQ,
		- in k8s manifest file, we have given a time before which it will wait for 20 seconds before kill switch to app, once app receives this event, internally spring will send event, code can register to that event. So within app springApplicationEvent also acts as observer pattern
Proxy patern -> @auditLogger , @transaction
Decorator - lombok
Adapter -> csp-spi is kind of adapter , jolt spec
Template method -> super class steps are overridden in subclass, in gateway we are overriding handler , parent class is handler is defining the skeleton (overall steps) like translation, validation, external translation, success and then subclasses are implementing one by one
